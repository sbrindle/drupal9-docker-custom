
# Root directory
root /var/www/html/web;

# Log files for supervision
error_log stderr;
access_log /dev/stdout;

# Increase max size.
client_max_body_size 50M;

# The Drupal configuration used below is inspired by NGINX contributed configuration.
# Reference: https://www.nginx.com/resources/wiki/start/topics/recipes/drupal/

location = /favicon.ico {
    log_not_found off;
    access_log off;
}

# Commented because "robots.txt" file is managed by Drupal module "robotstxt".
#location = /robots.txt {
#    allow all;
#    log_not_found off;
#    access_log off;
#}

# Very rarely should these ever be accessed outside of your lan
#location ~* \.(txt|log)$ {
#    allow 192.168.0.0/16;
#    deny all;
#}

location ~ \..*/.*\.php$ {
    return 403;
}

location ~ ^/sites/.*/private/ {
    return 403;
}

# Block access to scripts in site files directory
location ~ ^/sites/[^/]+/files/.*\.php$ {
    deny all;
}

# Block access to tmp directory in site files directory
location ~ ^/sites/[^/]+/files/tmp/ {
    deny all;
}

# Allow "Well-Known URIs" as per RFC 5785
location ~* ^/.well-known/ {
    allow all;
}

# Block access to "hidden" files and directories whose names begin with a
# period. This includes directories used by version control systems such
# as Subversion or Git to store control files.
location ~ (^|/)\. {
    return 403;
}

location / {
    try_files $uri /index.php?$query_string;
}

location @rewrite {
    rewrite ^ /index.php;
}

# Don't allow direct access to PHP files in the vendor directory.
location ~ /vendor/.*\.php$ {
    deny all;
    return 404;
}

# Protect files and directories from prying eyes.
location ~* \.(engine|inc|install|make|module|profile|po|sh|.*sql|theme|twig|tpl(\.php)?|xtmpl|yml)(~|\.sw[op]|\.bak|\.orig|\.save)?$|/(\.(?!well-known).*|Entries.*|Repository|Root|Tag|Template|composer\.(json|lock)|web\.config)$|/#.*#$|\.php(~|\.sw[op]|\.bak|\.orig|\.save)$ {
    deny all;
    return 404;
}

# In Drupal 8, we must also match new paths where the '.php' appears in
# the middle, such as update.php/selection. The rule we use is strict,
# and only allows this pattern with the update.php front controller.
# This allows legacy path aliases in the form of
# blog/index.php/legacy-path to continue to route to Drupal nodes. If
# you do not have any paths like that, then you might prefer to use a
# laxer rule, such as:
#   location ~ \.php(/|$) {
# The laxer rule will continue to work if Drupal uses this new URL
# pattern with front controllers other than update.php in a future
# release.
location ~ '\.php$|^/update.php' {

    # Fast-cgi cache
    fastcgi_cache  microcache;
    fastcgi_cache_lock on;
    fastcgi_cache_key $scheme$host$request_uri$is_args$args$request_method;
    fastcgi_cache_valid 200 301 302 304 404 10m;
    fastcgi_cache_valid 404 10m;
    fastcgi_cache_methods GET HEAD;
    fastcgi_cache_use_stale updating error timeout invalid_header http_500 http_503;
    fastcgi_ignore_headers Cache-Control Expires Set-Cookie;
    fastcgi_max_temp_file_size 10M;

    fastcgi_cache_bypass $no_cache;
    fastcgi_no_cache $no_cache;

    add_header X-Cache $upstream_cache_status;

    # Split path-info
    fastcgi_split_path_info ^(.+?\.php)(|/.*)$;

    # Ensure the php file exists. Mitigates CVE-2019-11043
    try_files $fastcgi_script_name =404;
    # Security note: If you're running a version of PHP older than the
    # latest 5.3, you should have "cgi.fix_pathinfo = 0;" in php.ini.
    # See http://serverfault.com/q/627903/94922 for details.
    include fastcgi_params;

    # Block httpoxy attacks. See https://httpoxy.org/.
    fastcgi_param HTTP_PROXY "";
    fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
    fastcgi_param PATH_INFO $fastcgi_path_info;
    fastcgi_param QUERY_STRING $query_string;
    fastcgi_intercept_errors on;

    # Hide Drupal headers
    fastcgi_hide_header 'X-Drupal-Cache';
    fastcgi_hide_header 'X-Drupal-Dynamic-Cache';
    fastcgi_hide_header 'X-Generator';

    # Increase Timeout
    fastcgi_read_timeout 120s;

    # Use an "useless" variable so that nginx can start even if the remote host is not reachable.
    fastcgi_pass <ENDPOINT_PHP>:9000;
}

location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf)$ {
    try_files $uri @rewrite;
    expires <CACHE_STATIC_EXPIRES>;
    log_not_found off;

    # Add cache.
    add_header Cache-Control "public";
    open_file_cache <CACHE_STATIC_RULE>;
    open_file_cache_valid 1h;
    open_file_cache_min_uses 3;
    open_file_cache_errors on;

    # Enable gzip.
    gzip_static on;

    # Manage CORS.
    include /etc/nginx/snippets/cors.conf;
}

# Fighting with Styles? This little gem is amazing.
location ~ ^/sites/.*/files/styles/ {
    try_files $uri @rewrite;
}

# Handle private files through Drupal. Private file's path can come
# with a language prefix.
location ~ ^(/[a-z\-]+)?/system/files/ {
    try_files $uri /index.php?$query_string;
}

# Enforce clean URLs
# Removes index.php from urls like www.example.com/index.php/my-page --> www.example.com/my-page
# Could be done with 301 for permanent or other redirect codes.
if ($request_uri ~* "^(.*/)index\.php/(.*)") {
    return 307 $1$2;
}

# Enforce CORS for IDP templates
location ~ ^/.*/idp/templates/ {
    include /etc/nginx/snippets/cors.conf;
}
